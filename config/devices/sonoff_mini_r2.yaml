# node_id:            The id of the name
# node_name:          The of the node, also used in sensor names
# encryption_key:     A key used for encrypting the api
# password:           This password is used for the api, ap, ota, and web_server
# wifi_ssid:          The ssid name of the wifi network
# wifi_password:      The password of the wifi network
# direct_mode:        The inital value for the direct mode option
# double_toggle:      The inital value for the double toggle option
# double_toggle_time: The inital toggle speed for the double toggle option

# Include default packages
packages:
  device_base: github://wjtje/esphome-config/config/device_base.yaml@main
  default_components: github://wjtje/esphome-config/config/default_components.yaml@main

# Define the chip
esp8266:
  board: esp8285

script:
  - id: on_switch_toggle
    then:
      - if:
          # Check if other script script is running and if double toggle is enabled
          condition:
            and:
              - script.is_running: on_switch_toggle_2
              - lambda: 'return id(double_toggle);'
          then:
            - script.stop: on_switch_toggle_2
            # Send the event to Home Assistant
            - homeassistant.event:
                event: esphome.sonoff_double_toggle
                data:
                  node_id: $node_id
                data_template:
                  button_id: "{{ button_id }}"
                variables:
                  button_id: !lambda 'return id(button_id);'
          else:
            - script.execute: on_switch_toggle_2
  - id: on_switch_toggle_2
    then:
      # Check if we should wait for double toggle
      - if:
          condition:
            lambda: 'return id(double_toggle);'
          then:
            - delay: !lambda 'return id(double_toggle_time).state * 1000;'
      # Only switch the relay when not connected or direct mode is enabled
      - if:
          condition:
            or:
              - not:
                  api.connected:
              - lambda: |-
                  return id(direct_mode);
          then:
            - switch.toggle:
                id: relay_1
      #  Send the event to Home Assistant
      - homeassistant.event:
          event: esphome.sonoff_single_toggle
          data:
            node_id: $node_id
          data_template:
            button_id: "{{ button_id }}"
          variables:
            button_id: !lambda 'return id(button_id);'

# Define the two default outputs
output:
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO13
    inverted: True
  - id: relay_ouput
    platform: gpio
    pin: GPIO12

binary_sensor:
  # The internal push button
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_press:
      - switch.toggle:
          id: relay_1
  # The external switch
  - platform: gpio
    name: ${node_name} Switch
    pin: GPIO04
    id: switch_0
    filters:
      - invert:
    on_press:
      then:
        - globals.set:
            id: button_id
            value: '0'
        - script.execute: on_switch_toggle
    on_release:
      then:
        - globals.set:
            id: button_id
            value: '0'
        - script.execute: on_switch_toggle

light:
  # Red LED
  - platform: status_led
    name: ${node_name} Red LED
    pin:
      number: GPIO13
      inverted: true
    internal: true
  # the 4 lines below define the Blue LED light on Sonoff Mini, to expose in Home Assistant remove line "internal: true"
  - platform: monochromatic
    name: ${node_name} Blue LED
    output: blue_led
    internal: true # hides the Blue LED from Home Assistant

globals:
  - id: direct_mode
    type: bool
    initial_value: $direct_mode
  - id: double_toggle
    type: bool
    initial_value: $double_toggle
  - id: button_id
    type: int
    initial_value: '0'

number:
  - platform: template
    name: ${node_name} Double Toggle Time
    id: double_toggle_time
    entity_category: config
    icon: mdi:cog-transfer
    unit_of_measurement: s
    optimistic: true
    min_value: 0
    max_value: 1
    initial_value: $double_toggle_time
    step: 0.05

switch:
  # The internal relay
  - platform: output
    name: ${node_name} Relay
    icon: mdi:lightning-bolt
    output: relay_ouput
    id: relay_1
  # Configuration for internal automatisation
  - platform: template
    name: ${node_name} Direct Mode
    entity_category: config
    icon: mdi:cog-transfer
    lambda: |-
      return id(direct_mode);
    turn_on_action:
      - globals.set:
          id: direct_mode
          value: 'true'
    turn_off_action:
      - globals.set:
          id: direct_mode
          value: 'false'
  # Configuration for the double toggle fuction
  - platform: template
    name: ${node_name} Double Toggle
    entity_category: config
    icon: mdi:cog-transfer
    lambda: |-
      return id(double_toggle);
    turn_on_action:
      - globals.set:
          id: double_toggle
          value: 'true'
    turn_off_action:
      - globals.set:
          id: double_toggle
          value: 'false'
