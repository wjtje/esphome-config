# node_id:            The id of the name
# node_name:          The of the node, also used in sensor names
# encryption_key:     A key used for encrypting the api
# password:           This password is used for the ap, ota, and web_server
# wifi_ssid:          The ssid name of the wifi network
# wifi_password:      The password of the wifi network
# direct_mode:        The inital value for the direct mode option
# double_toggle:      The inital value for the double toggle option
# double_toggle_time: The inital toggle speed for the double toggle option
# relay_restore_mode: The way the relay is restored when the chip is restarted

# Include default packages
packages:
  device_base: github://wjtje/esphome-config/config/device_base.yaml@main
  default_components: github://wjtje/esphome-config/config/default_components.yaml@main

# Define the chip
esp8266:
  board: esp8285

script:
  - id: on_switch_toggle
    mode: restart
    parameters:
      button_id: int
      direct_mode: bool
      double_toggle: bool
      double_toggle_time: float
    then:
      # Logger
      - logger.log:
          format: "Called 'on_switch_toggle' with (%i, %i, %f)"
          args:
            - button_id
            - double_toggle
            - double_toggle_time
      # Check if double toggle is enabled
      - if:
          condition:
            lambda: |-
              return double_toggle;
          then:
            # Check if data is stored in prev_toggle_millis
            - if:
                condition:
                  lambda: |-
                    return id(prev_toggle_millis) == 0;
                then:
                  # Store current millis
                  - globals.set:
                      id: prev_toggle_millis
                      value: !lambda |-
                        return millis();
                else:
                  # Display time between toggles
                  - logger.log:
                      format: "Button %i double toggled in %i ms"
                      args:
                        - button_id
                        - millis() - id(prev_toggle_millis)
                  # Clear prev_toggle_millis
                  - globals.set:
                      id: prev_toggle_millis
                      value: "0"
                  # Increase counter
                  - lambda: |-
                      id(double_toggle_amount) += 1;
            # Delay toggle time
            - delay: !lambda "return double_toggle_time * 1000;"
      # Display a log mesage
      - logger.log:
          format: "Double toggled button %i %i time(s)"
          args:
            - button_id
            - id(double_toggle_amount)
      # Check if direct mode is enabled or not connected
      - if:
          condition:
            and:
              - or:
                  - not:
                      api.connected:
                  - lambda: |-
                      return direct_mode;
              - lambda: |-
                  return id(double_toggle_amount) == 0;
          then:
            - switch.toggle:
                id: relay_1
      # Send event to home assistant
      - if:
          condition:
            lambda: |-
              return id(double_toggle_amount) == 0;
          then:
            - homeassistant.event:
                event: esphome.sonoff_single_toggle
                data:
                  node_id: $node_id
                data_template:
                  button_id: "{{ button_id }}"
                variables:
                  button_id: !lambda "return button_id;"
      - if:
          condition:
            lambda: |-
              return id(double_toggle_amount) == 1;
          then:
            - homeassistant.event:
                event: esphome.sonoff_double_toggle
                data:
                  node_id: $node_id
                data_template:
                  button_id: "{{ button_id }}"
                variables:
                  button_id: !lambda "return button_id;"
      - homeassistant.event:
          event: esphome.sonoff_toggle
          data:
            node_id: $node_id
          data_template:
            button_id: "{{ button_id }}"
            toggle_amount: "{{ toggle_amount }}"
          variables:
            button_id: !lambda "return button_id;"
            toggle_amount: !lambda "return id(double_toggle_amount);"
      # Reset globals
      - globals.set:
          id: prev_toggle_millis
          value: "0"
      - globals.set:
          id: double_toggle_amount
          value: "0"

# Define the two default outputs
output:
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO13
    inverted: True
  - id: relay_ouput
    platform: gpio
    pin: GPIO12

binary_sensor:
  # The internal push button
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_press:
      - switch.toggle:
          id: relay_1
  # The external switch
  - platform: gpio
    name: ${node_name} Switch
    pin: GPIO04
    id: switch_0
    filters:
      - invert:
      - delayed_off: 10ms
    on_state:
      then:
        - script.execute:
            id: on_switch_toggle
            button_id: 0
            direct_mode: !lambda "return id(direct_mode);"
            double_toggle: !lambda "return id(double_toggle);"
            double_toggle_time: !lambda "return id(double_toggle_time).state;"

light:
  # Red LED
  - platform: status_led
    name: ${node_name} Red LED
    pin:
      number: GPIO13
      inverted: true
    internal: true
  # the 4 lines below define the Blue LED light on Sonoff Mini, to expose in Home Assistant remove line "internal: true"
  - platform: monochromatic
    name: ${node_name} Blue LED
    output: blue_led
    internal: true # hides the Blue LED from Home Assistant

globals:
  - id: direct_mode
    type: bool
    initial_value: $direct_mode
  - id: double_toggle
    type: bool
    initial_value: $double_toggle
  - id: prev_toggle_millis
    type: int
    initial_value: "0"
  - id: double_toggle_amount
    type: int
    initial_value: "0"

number:
  # The toggle time that counts as a toggle
  - platform: template
    name: ${node_name} Double Toggle Time
    id: double_toggle_time
    entity_category: config
    icon: mdi:cog-transfer
    unit_of_measurement: s
    optimistic: true
    min_value: 0
    max_value: 1
    initial_value: $double_toggle_time
    step: 0.05

switch:
  # The internal relay
  - platform: output
    name: ${node_name} Relay
    icon: mdi:lightning-bolt
    output: relay_ouput
    restore_mode: $relay_restore_mode
    id: relay_1
  # Configuration for internal automatisation
  - platform: template
    name: ${node_name} Direct Mode
    entity_category: config
    icon: mdi:cog-transfer
    lambda: |-
      return id(direct_mode);
    turn_on_action:
      - globals.set:
          id: direct_mode
          value: "true"
    turn_off_action:
      - globals.set:
          id: direct_mode
          value: "false"
  # Configuration for the double toggle fuction
  - platform: template
    name: ${node_name} Double Toggle
    entity_category: config
    icon: mdi:cog-transfer
    lambda: |-
      return id(double_toggle);
    turn_on_action:
      - globals.set:
          id: double_toggle
          value: "true"
    turn_off_action:
      - globals.set:
          id: double_toggle
          value: "false"
