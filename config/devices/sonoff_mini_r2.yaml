output:
  - id: relay_ouput
    platform: gpio
    pin: GPIO12

light:
  - id: red_led
    platform: status_led
    internal: true
    pin: 
      number: GPIO13
      inverted: true

binary_sensor:
  # The internal push button
  - id: internal_btn
    platform: gpio
    pin: GPIO00
    internal: true
    filters: 
      - invert:
      - delayed_on_off: 10ms
    on_press: 
      then:
        - switch.toggle: relay_1
  # The external switch
  - id: switch_0
    platform: gpio
    name: Switch
    pin: GPIO04
    filters: 
      - invert: 
      - delayed_on_off: 2ms
    on_state: 
      then:
        - script.execute:
            id: on_switch_toggle_v2
            button_id: 0

switch:
  - platform: output
    name: Relay
    icon: mdi:lightning-bolt
    output: relay_ouput
    restore_mode: $relay_restore_mode
    id: relay_1

###########################

globals:
  # Script settings
  - id: g_direct_mode
    type: int[3]
    restore_value: false
    initial_value: '{$direct_mode, -1, -1}' # -1: disabled, >=0: toggle amount
  - id: g_double_toggle
    type: bool[3]
    restore_value: false
    initial_value: '{$double_toggle, $double_toggle, $double_toggle}'
  - id: g_toggle_duration
    type: int[3]
    restore_value: false
    initial_value: '{$toggle_duration, $toggle_duration, $toggle_duration}' # Value in ms
  # Script storage
  - id: g_prev_time
    type: uint32_t[3]
    restore_value: false
    initial_value: '{0, 0, 0}'
  - id: g_toggle_count
    type: int[3]
    restore_value: false
    initial_value: '{-1, -1, -1}'

interval:
  - interval: 10ms
    then:
      lambda: |-
        static const char *TAG = "interval";

        const uint32_t now = millis();
        const size_t count = sizeof(id(g_toggle_count)) / sizeof(*id(g_toggle_count));

        for (size_t i = 0; i < count; ++i) {
          const uint32_t difference = now - id(g_prev_time)[i];
          int &toggle_count = id(g_toggle_count)[i];
          const uint32_t &toggle_duration = id(g_toggle_duration)[i];

          if (difference > toggle_duration && toggle_count >= 0) {
            id(send_switch_toggle).execute(i, toggle_count);
            toggle_count = -1;
          }
        }

script:
  - id: on_switch_toggle
    mode: queued
    parameters:
      button_id: int
      direct_mode: bool
      double_toggle: bool
      double_toggle_time: float # Value in seconds
    then:
      - lambda: |-
          // Store settings
          id(g_direct_mode)[button_id] = direct_mode ? 0 : -1;
          id(g_double_toggle)[button_id] = double_toggle;
          id(g_toggle_duration)[button_id] = double_toggle_time * 1000;

          id(on_switch_toggle_v2).execute(button_id);

  - id: on_switch_toggle_v2
    mode: queued
    parameters: 
      button_id: int
    then:
      - lambda: |-
          static const char *TAG = "on_switch_toggle";

          uint32_t &prev_time = id(g_prev_time)[button_id];
          int &toggle_count = id(g_toggle_count)[button_id];

          // Calculate difference between button presses
          const uint32_t now = millis();
          const uint32_t difference = now - prev_time;

          // Check if there is an unhandled toggle state
          if (difference >= id(g_toggle_duration)[button_id] && toggle_count >= 0) {
            ESP_LOGW(TAG, "Detected unhandled toggle state, sending it");
            // Execute send action
            id(send_switch_toggle).execute(button_id, toggle_count);
            toggle_count = -1;
          }

          // Update switch state
          prev_time = now;
          toggle_count++;

          // Check if double toggle is enabled
          if (!(id(g_double_toggle)[button_id])) {
            // Enabled, send switch toggle directly
            id(send_switch_toggle).execute(button_id, toggle_count);
            toggle_count = -1;
          }

  - id: send_switch_toggle
    mode: queued
    parameters:
      button_id: int
      toggle_count: int
    then:
      - lambda: |-
          static const char *TAG = "send_switch_toggle";

          // Check for direct mode
          if (id(g_direct_mode)[button_id] == toggle_count) {
            id(relay_1).toggle();
          }

          ESP_LOGI(TAG, "Sending %i for %i", toggle_count, button_id);
          
          // Send 
          api::HomeassistantServiceResponse event_toggle_type;
          api::HomeassistantServiceResponse event_toggle_amount;
          
          event_toggle_type.service = toggle_count == 0
            ? "esphome.sonoff_single_toggle"
            : "esphome.sonoff_double_toggle";
          event_toggle_type.is_event = true;

          event_toggle_amount.service = "esphome.sonoff_toggle";
          event_toggle_amount.is_event = true;

          api::HomeassistantServiceMap kv;

          kv.key = "node_id";
          kv.value = "$node_id";
          event_toggle_type.data.push_back(kv);
          event_toggle_amount.data.push_back(kv);

          kv.key = "button_id";
          kv.value = "{{ id }}";
          event_toggle_type.data_template.push_back(kv);
          event_toggle_amount.data_template.push_back(kv);

          kv.key = "toggle_amount";
          kv.value = "{{ count }}";
          event_toggle_amount.data_template.push_back(kv);

          kv.key = "id";
          kv.value = std::to_string(button_id);
          event_toggle_type.variables.push_back(kv);
          event_toggle_amount.variables.push_back(kv);

          kv.key = "count";
          kv.value = std::to_string(toggle_count);
          event_toggle_amount.variables.push_back(kv);

          id(api_server).send_homeassistant_service_call(event_toggle_type);
          id(api_server).send_homeassistant_service_call(event_toggle_amount);

###########################

esphome:
  name: $node_id
  friendly_name: $node_name

  # build_path: /config/esphome/build/${node_id} # Used for development

esp8266:
  board: esp8285

logger:

api:
  id: api_server
  encryption:
    key: $encryption_key

ota:
  - platform: esphome
    password: $ota_password

wifi:
  ssid: $wifi_ssid
  password: $wifi_password

  ap:
    ssid: $node_name Fallback Hotspot
    password: $ap_password

captive_portal:
    
web_server:
  port: 80
  auth: 
    username: admin
    password: $web_password
